#!/bin/bash

# AIGNE CodeSmith Release Script
# Automates the complete release process for the GitHub Action

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
DIST_DIR="dist"
MAIN_BRANCH="master"
PACKAGE_FILE="package.json"
ACTION_FILE="action.yml"

# Utility functions
log() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

# Check if we're on the main branch
check_branch() {
    local current_branch=$(git branch --show-current)
    if [[ "$current_branch" != "$MAIN_BRANCH" ]]; then
        error "Must be on $MAIN_BRANCH branch to create a release. Current branch: $current_branch"
    fi
}

# Check if working directory is clean
check_clean_working_dir() {
    if [[ -n $(git status --porcelain) ]]; then
        error "Working directory is not clean. Please commit or stash your changes."
    fi
}

# Check if required tools are available
check_dependencies() {
    command -v node >/dev/null 2>&1 || error "Node.js is required but not installed."
    command -v npm >/dev/null 2>&1 || error "npm is required but not installed."
    command -v git >/dev/null 2>&1 || error "Git is required but not installed."
    command -v gh >/dev/null 2>&1 || error "GitHub CLI is required but not installed."
    command -v jq >/dev/null 2>&1 || error "jq is required but not installed. Install with: brew install jq"
}

# Get current version from package.json
get_current_version() {
    jq -r '.version' "$PACKAGE_FILE"
}

# Update version in package.json
update_package_version() {
    local new_version=$1
    jq --arg version "$new_version" '.version = $version' "$PACKAGE_FILE" > tmp.$$.json && mv tmp.$$.json "$PACKAGE_FILE"
    success "Updated package.json version to $new_version"
}

# Validate version format
validate_version() {
    local version=$1
    if [[ ! $version =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*)?$ ]]; then
        error "Invalid version format: $version. Use semantic versioning (e.g., 1.0.0, 1.0.0-beta.1)"
    fi
}

# Generate changelog entry
generate_changelog() {
    local version=$1
    local previous_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
    
    log "Generating changelog for version $version..."
    
    if [[ -n "$previous_tag" ]]; then
        echo "## [$version] - $(date +%Y-%m-%d)"
        echo ""
        echo "### Changes since $previous_tag"
        echo ""
        git log --oneline --pretty=format:"- %s" "$previous_tag"..HEAD | grep -v "^- Merge\|^- chore: rebuild release"
    else
        echo "## [$version] - $(date +%Y-%m-%d)"
        echo ""
        echo "### Initial Release"
        echo ""
        echo "- Initial release of AIGNE CodeSmith GitHub Action"
    fi
}

# Build and bundle the action
build_action() {
    log "Building TypeScript sources..."
    npm run build || error "TypeScript build failed"
    
    log "Bundling with ncc..."
    npm run package || error "ncc bundling failed"
    
    log "Running linting..."
    if ! npm run lint; then
        warn "Linting failed but continuing release. Consider fixing lint issues after release."
    fi
    
    log "Running formatting check..."
    if ! npm run format-check; then
        warn "Format check failed. Running format to fix issues..."
        npm run format
    fi
    
    success "Build completed successfully"
}

# Commit release changes
commit_release() {
    local version=$1
    
    git add "$PACKAGE_FILE" "$DIST_DIR/"
    git commit -m "chore: release v$version

- Update version to $version
- Rebuild distribution files
- Generated by release script

ðŸ¤– Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"
    
    success "Committed release changes for v$version"
}

# Create and push git tag
create_tag() {
    local version=$1
    local tag="v$version"
    
    git tag -a "$tag" -m "Release $tag

$(generate_changelog "$version")"
    
    git push origin "$MAIN_BRANCH" --tags
    success "Created and pushed tag $tag"
}

# Create GitHub release
create_github_release() {
    local version=$1
    local tag="v$version"
    local changelog_file=$(mktemp)
    
    generate_changelog "$version" > "$changelog_file"
    
    log "Creating GitHub release for $tag..."
    
    gh release create "$tag" \
        --title "AIGNE CodeSmith $tag" \
        --notes-file "$changelog_file" \
        --latest
    
    rm "$changelog_file"
    success "Created GitHub release $tag"
}

# Update major version tag (for GitHub Actions marketplace)
update_major_tag() {
    local version=$1
    local major_version="v$(echo "$version" | cut -d. -f1)"
    
    log "Updating major version tag $major_version..."
    
    # Delete existing major tag locally and remotely
    git tag -d "$major_version" 2>/dev/null || true
    git push origin ":refs/tags/$major_version" 2>/dev/null || true
    
    # Create new major tag
    git tag -a "$major_version" -m "Release $major_version (latest: v$version)"
    git push origin "$major_version" --force
    
    success "Updated major version tag $major_version"
}

# Main release function
main() {
    local release_type=${1:-""}
    local custom_version=${2:-""}
    
    log "ðŸš€ Starting AIGNE CodeSmith release process..."
    
    # Pre-flight checks
    check_dependencies
    check_branch
    check_clean_working_dir
    
    # Get current version
    local current_version=$(get_current_version)
    log "Current version: $current_version"
    
    # Determine new version
    local new_version
    if [[ -n "$custom_version" ]]; then
        new_version="$custom_version"
        validate_version "$new_version"
    elif [[ "$release_type" == "major" ]]; then
        new_version=$(echo "$current_version" | awk -F. '{print ($1+1)".0.0"}')
    elif [[ "$release_type" == "minor" ]]; then
        new_version=$(echo "$current_version" | awk -F. '{print $1".".($2+1)".0"}')
    elif [[ "$release_type" == "patch" ]]; then
        new_version=$(echo "$current_version" | awk -F. '{print $1"."$2".".($3+1)}')
    else
        error "Usage: $0 <major|minor|patch> [custom-version]
        
Examples:
  $0 patch                 # 0.1.0 -> 0.1.1
  $0 minor                 # 0.1.0 -> 0.2.0
  $0 major                 # 0.1.0 -> 1.0.0
  $0 custom 1.5.0-beta.1   # Set specific version"
    fi
    
    log "New version will be: $new_version"
    
    # Confirm with user
    echo -n "Proceed with release v$new_version? [y/N]: "
    read -r response
    if [[ ! "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
        error "Release cancelled by user"
    fi
    
    # Update version
    update_package_version "$new_version"
    
    # Build and test
    build_action
    
    # Create release commit and tag
    commit_release "$new_version"
    create_tag "$new_version"
    
    # Create GitHub release
    create_github_release "$new_version"
    
    # Update major version tag for marketplace
    update_major_tag "$new_version"
    
    success "ðŸŽ‰ Release v$new_version completed successfully!"
    
    log "Next steps:"
    log "  1. Verify the release at: https://github.com/$(git config --get remote.origin.url | sed 's/.*github.com[/:]\(.*\)\.git/\1/')/releases/tag/v$new_version"
    log "  2. Test the action in a repository using: $(git config --get remote.origin.url | sed 's/.*github.com[/:]\(.*\)\.git/\1/')@v$new_version"
    log "  3. Update any documentation that references version numbers"
}

# Run main function with all arguments
main "$@"